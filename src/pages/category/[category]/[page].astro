---
import { CollectionEntry, getCollection } from "astro:content";

import type { GetStaticPaths, Page } from "astro";

import { BLOG_PAGE_SIZE, categories, type CategoryId } from "@lib/settings";
import Layout from "@lib/layouts/PostList.astro";

export const getStaticPaths: GetStaticPaths = async ({paginate}) => {
    const ids = Object.keys(categories) as CategoryId[];
    const posts = (await getCollection('blog'));
    return ids.map(catId => {
        const category = categories[catId];
        const filteredPosts = posts.filter(post => {
                return post.data.category === catId && (import.meta.env.DEV || !post.data.draft);
            }).sort((a, b) => {
                const aPub = a.data.pubDate.getTime();
                const bPub = b.data.pubDate.getTime();
                const aEdt = a.data.updatedDate?.getTime() ?? 0;
                const bEdt = b.data.updatedDate?.getTime() ?? 0;
                return Math.max(bPub, bEdt) - Math.max(aEdt, aPub) || a.id.localeCompare(b.id);
            })
    
        return paginate(filteredPosts, {
            pageSize: BLOG_PAGE_SIZE,
            params: { category: catId },
            props: { category }
        });
    })
}

const { page, category } = Astro.props;
const catId = Astro.params.category as CategoryId | undefined;

interface Props {
    page: Page<CollectionEntry<"blog">>,
    category: Category,
}

---

<Layout {page} title={category.title} description={category.description} category={catId}/>