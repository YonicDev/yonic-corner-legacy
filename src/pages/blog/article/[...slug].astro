---
import { type CollectionEntry, getCollection, getEntry } from 'astro:content';
import { Image } from 'astro:assets';

import type { ImageMetadata } from 'astro';

import Layout from "@lib/layouts/Article.astro";
import Series from "@lib/components/Series.astro";

import { filterPosts, sortPosts } from '@lib/util';
import { categories } from '@lib/settings';

interface Props {
    post: CollectionEntry<'blog'>,
    allPosts: CollectionEntry<'blog'>[],
    index: number
}

export async function getStaticPaths() {
	const posts = (await getCollection('blog')).filter(filterPosts).sort(sortPosts)
    
	return posts.map((post, i) => ({
		params: { slug: post.slug },
		props: {post, allPosts: posts, index: i },
	}));
}
const { post, allPosts, index } = Astro.props;

const postsSameCategory = allPosts.filter(p => p.data.category === post.data.category);
const sameCategoryIndex = postsSameCategory.indexOf(post);

let seriesPosts: CollectionEntry<"blog">[] = [];
let series: CollectionEntry<"series"> | undefined = undefined;
let seriesIndex = -1;
if(post.data.series) {
    seriesPosts = allPosts.filter(other => post.data.series && other.data.series && post.data.series.id.id === other.data.series.id.id)
        .sort((a,b) => a.data.series!.order - b.data.series!.order);
    seriesIndex = seriesPosts.indexOf(post);
    series = await getEntry(post.data.series.id);
}

const dateFormat = new Intl.DateTimeFormat('en-US',
{
    year: 'numeric',
    month: 'long',
    day: '2-digit',
})

const baseUrl = import.meta.env.BASE_URL.replace(/\/$/, "");

/**
 * Gets the hero image.
 * 
 * The hero image has to be named "hero.png" and be located in a folder named the same way
 * as the target article inside the assets/articles folder.
 * It doesn't need to be a PNG image, other formats are supported.
 */
 async function getHeroImage(): Promise<ImageMetadata | null> {
    try {
        return (await import(`../../../assets/articles/${post.slug}/hero-legacy.png`)).default
    } catch {
        return null;
    }
}

const {Content, remarkPluginFrontmatter} = await post.render();
const hero = await getHeroImage();
const {readingTime} = remarkPluginFrontmatter;
---

<Layout {...post.data}>
    <div class="category-label"><a href={`${baseUrl}/category/${post.data.category}/1`}><img src={`${baseUrl}/icons/category/${post.data.category}.gif`} align="top"/>{" "}{categories[post.data.category].title}</a></div>
    {
        hero!=null && <Image alt={post.data.title} src={hero} width="454" format="jpg" quality="max"/>
    }
    <h1>{post.data.title}{post.data.draft && <sup>[draft]</sup>}</h1>
    <div>
        <span><img class="icon" src={baseUrl + "/icons/article.gif"} alt="Published" title="Published"/>{" "}{dateFormat.format(post.data.pubDate)}</span>{" "}
        { post.data.updatedDate && <><span><img class="icon" src={baseUrl + "/icons/edit.gif"} alt="Last modified" title="Last modified"/>{" "}{dateFormat.format(post.data.updatedDate)}</span>{" "}</> }
        <span><img class="icon" src={baseUrl + "/icons/time.gif"} alt="Time to read" title="Time to read"/> {readingTime.text} min{readingTime.text!=1 && "s"} {readingTime.video > 0 && `(plus ${readingTime.video} min${readingTime.video!=1 && "s"} of videos)`}</span>
    </div>
    <div class="tags-list">
        <img class="icon" src={baseUrl + "/icons/tags.gif"} alt="Tags" title="Tags" width="16" height="16"/> Tags:
        { post.data.tags.length > 0 ? post.data.tags.sort((a, b) => a.localeCompare(b)).map(tag => (
            <a class="tag" href={`${baseUrl}/tag/${tag}/1`}>{tag.replaceAll("-"," ")}</a>
        )) : <span>None</span>}
    </div>
    <hr/>
    <Content/>
    {
        series && seriesPosts.length > 0 && seriesIndex >= 0 && (
            <Series slot="below" series={series.id} category="series" title={"Series: " + series.data.title} previous={seriesPosts[seriesIndex-1]} next={seriesPosts[seriesIndex+1]}/>
        )
    }
    <Series slot="below" category={post.data.category} title={categories[post.data.category].title + " posts"} previous={postsSameCategory[sameCategoryIndex-1]} next={postsSameCategory[sameCategoryIndex+1]}/>
    <Series slot="below" category="all" title="All posts" previous={allPosts[index-1]} next={allPosts[index+1]}/>
</Layout>

<style is:global>
    .tags-list {
        line-height: 24px;
        word-wrap: normal;
        word-break: keep-all;
    }
    .category-label {
        margin-bottom: 12px;
    }
    #main-article hr {
        border: none;
        border-top: 3px solid #009183;
    }
    .icon {
        cursor: help;
    }
</style>