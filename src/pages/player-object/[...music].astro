---
import { getImage } from 'astro:assets';
import { getCollection } from 'astro:content';
import ffprobe from 'ffprobe';
import {path as ffprobePath } from 'ffprobe-static';

export async function getStaticPaths() {
    const songList = await getCollection("music");
    return songList.map((song) => {
        return {
            params: { music: song.id },
            props: { music: song.data }
        }
    });
}

const { title, sources, author, album, duration, cover } = Astro.props.music;
const validFormats = ["audio/mpeg", "audio/mp3","audio/wav"];

const musicSrc = sources.find(source => new URL(source.src).protocol === "http:" && validFormats.indexOf(source.type) >= 0)

const coverImage = cover ? (await import(`../../assets/covers/${cover}.png`)).default : undefined;
const coverSrc = coverImage? (await getImage({src: coverImage, width: 24, height: 24, format: 'jpg' })).src : undefined;

let musicDuration: number;
const DEFAULT_DURATION = 1000; // To prevent division by 0 on the swf file.

switch(typeof duration) {
	case "number":
		musicDuration = duration;
		break;
	case "string":
		musicDuration = getDurationFromString(duration);
		break;
	default:
		musicDuration = (musicSrc? await getDurationFromSrc(musicSrc.src) : DEFAULT_DURATION);
}

const flashVars = {
	src: musicSrc ? decodeURI(musicSrc.src) : "",
	coverImage: coverSrc? decodeURI(coverSrc) : undefined,
	musicDuration,
	musicTitle: [title, author, album].filter(data => data!=null).join(" | ")
}

function getDurationFromString(duration: string): number {
	const [mins, secs] = duration.split(":");
	return parseInt(mins)*60 + parseInt(secs);
}

async function getDurationFromSrc(source: string) {
	const res = await ffprobe(source, {path: ffprobePath});
	return parseFloat(res.streams[0].duration ?? "0");
}
---
<!DOCTYPE html>
<html>
	<head>
		<title>{title} - Music player</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<script src="http://code.jquery.com/jquery-1.0.4.pack.js" integrity="sha256-upOUW/O9T857epnazR8IlX1C0ZSEE19MuqWoC75KUOE=" crossorigin="anonymous"></script>
		<script is:inline src="/client-scripts/json2.js"></script>
		<script is:inline src="/client-scripts/swfobject.js"></script>
	</head>
	<body marginwidth="0" marginheight="0" leftmargin="0" topmargin="0" rightmargin="0" bottommargin="0" bgcolor="#A1FFED">
		<!-- El método de incorporación dinámica de SWFObject reemplaza este contenido HTML alternativo por contenido de Flash si hay disponible compatibilidad suficiente para JavaScript y el plug-in de Flash. -->
		<div id="flashContent">
			<p>You need Flash Player 6 or higher for the music player.</p>
		</div>
		<div id="flashData" style="display:none">{JSON.stringify(flashVars)}</div>
		<script is:inline src="/client-scripts/music-player.js"></script>
	</body>
</html>

<style is:global>
	html, body { 
        font-family: Verdana, Geneva, Tahoma, sans-serif;
		font-size: 12px;
		overflow: hidden;
	}
	body { 
		margin:0; 
		padding:0;
	}
</style>