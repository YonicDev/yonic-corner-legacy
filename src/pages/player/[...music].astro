---
import { getImage } from 'astro:assets';
import { getCollection } from 'astro:content';
import ffprobe from 'ffprobe';
import {path as ffprobePath } from 'ffprobe-static';

import { hasSuitableSource } from "@lib/util";

export async function getStaticPaths() {
    const songList = await getCollection("music");
    return songList.filter(({data}) => data.sources.find(hasSuitableSource) != null).map((song) => {
        return {
            params: { music: song.id },
            props: { music: song.data }
        }
    });
}

const { title, sources, author, album, duration, cover } = Astro.props.music;

const musicSrc = sources.find(hasSuitableSource);

const coverImage = cover ? (await import(`../../assets/covers/${cover}.png`)).default : undefined;
const coverSrc = coverImage? (await getImage({src: coverImage, width: 24, height: 24, format: 'jpg' })).src : undefined;

let musicDuration: number;
const DEFAULT_DURATION = 1; // To prevent division by 0 on the swf file.

switch(typeof duration) {
	case "number":
		musicDuration = duration;
		break;
	case "string":
		musicDuration = getDurationFromString(duration);
		break;
	default:
		musicDuration = (musicSrc? await getDurationFromSrc(musicSrc.src) : DEFAULT_DURATION);
}

const flashVars = {
	src: musicSrc ? decodeURI(musicSrc.src) : "",
	coverImage: coverSrc? decodeURI(coverSrc) : undefined,
	musicDuration,
	musicTitle: [title, author, album].filter(data => data!=null).join(" | ")
}

function getDurationFromString(duration: string): number {
	const [mins, secs] = duration.split(":");
	return parseInt(mins)*60 + parseInt(secs);
}

async function getDurationFromSrc(source: string) {
	try {
		const res = await ffprobe(source, {path: ffprobePath});
		return parseFloat(res.streams[0]?.duration ?? DEFAULT_DURATION.toString());
	} catch {
		return DEFAULT_DURATION;
	}
}

function encode(url: string) {
	return decodeURIComponent(url) == url? encodeURI(url) : url;
}

const parsedFlashVars = Object.entries(flashVars).reduce((parsed, [key, value]) => {
	if(value==undefined) return '';
	return `${parsed}&${key}=${encode(value.toString())}`;
}, "").slice(1);

const flashSrc = "/yonic-corner-music-player.swf";
const size = 196;
---
<!DOCTYPE html>
<html>
	<head>
		<title>{title} - Music player</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	</head>
	<body marginwidth="0" marginheight="0" leftmargin="0" topmargin="0" rightmargin="0" bottommargin="0" bgcolor="#A1FFED">
		<div id="flashContent">
			<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width={size} height={size} id="player">
				<param name="movie" value={flashSrc} />
				<param name="FlashVars" value={parsedFlashVars} />
				<param name="quality" value="high" />
				<param name="bgcolor" value="#A1FFED" />
				<param name="play" value="true" />
				<param name="loop" value="true" />
				<param name="wmode" value="opaque" />
				<param name="scale" value="showall" />
				<param name="menu" value="true" />
				<param name="devicefont" value="true" />
				<param name="salign" value="" />
				<param name="allowScriptAccess" value="sameDomain" />
				<!--[if !IE]>-->
				<object type="application/x-shockwave-flash" data={flashSrc} width={size} height={size}>
					<param name="movie" value={flashSrc} />
					<param name="FlashVars" value={parsedFlashVars} />
					<param name="quality" value="high" />
					<param name="bgcolor" value="#A1FFED" />
					<param name="play" value="true" />
					<param name="loop" value="true" />
					<param name="wmode" value="opaque" />
					<param name="scale" value="showall" />
					<param name="menu" value="true" />
					<param name="devicefont" value="true" />
					<param name="salign" value="" />
					<param name="allowScriptAccess" value="sameDomain" />
				<!--<![endif]-->
					You need Flash Player 6 or higher for the music player.
				<!--[if !IE]>-->
				</object>
				<!--<![endif]-->
			</object>
		</div>
	</body>
</html>


<style>
	html, body { 
        font-family: Verdana, Geneva, Tahoma, sans-serif;
		font-size: 12px;
		overflow: hidden;
	}
	body { 
		margin:0; 
		padding:0;
	}
</style>